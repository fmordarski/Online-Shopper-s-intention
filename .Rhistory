validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, edx, removed)
head(edx)
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/edx/ml-10m.zip", dl)
install.packages(c("car", "jsonlite", "qualtRics", "rvest", "stringr"))
library(qualtRics)
library(jsonlite)
library(rvest)
library(car)
library(stringr)
install.packages(c("car", "httr", "jsonlite", "qualtRics", "rvest", "stringr"))
install.packages(c("car", "httr", "jsonlite", "qualtRics", "rvest", "stringr"))
library(qualtRics)
library(jsonlite)
library(rvest)
library(car)
library(stringr)
headers <- c(
'X-API-TOKEN' = "**",
'Content-Type' = "application/json",
'Accept' = '*/*',
'accept-encoding' = 'gzip, deflate'
)
headers
######SV survey ID#####
##original sv<-"SV_24wCXBoW63NxQvH"
###chile sv<-"SV_1OdPqNOoApsuIdf"
###moze sie przyda sv<-"SV_9Go06eJvcpwNgHz"
###domestic https://surveys.az1.qualtrics.com/jfe/form/SV_eQy2KEpjbfFRbBX
sv<-"SV_eQy2KEpjbfFRbBX"
url <- paste("https://imercer.az1.qualtrics.com/API/v3/surveys/",sv,sep = "")
req <- httr::GET(url, httr::add_headers(headers))
View(req)
json <- httr::content(req, as = "text")
us <- fromJSON(json)
json
us
req
count_employee <- DataNA %>% group_by(Team) %>% select(Employee) %>% summarise_each(funs(n_distinct(Employee)))
install.packages("dplyr")
install.packages("tidyr")
install.packages("readr")
install.packages("rlang")
install.packages("DataCombine")
install.packages("plotly")
install.packages("rmarkdown")
is.installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])
is.installed("assertthat")
is.installed("base64enc")
is.installed("BH")
is.installed("cli")
is.installed("clipr")
is.installed("colorspace")
is.installed("crayon")
is.installed("crosstalk")
is.installed("curl")
is.installed("data.table")
is.installed("DataCombine")
is.installed("digest")
is.installed("dplyr")
is.installed("evaluate")
is.installed("fansi")
is.installed("ggplot2")
is.installed("glue")
is.installed("gtable")
is.installed("hexbin")
is.installed("highr")
is.installed("hms")
is.installed("htmltools")
is.installed("htmlwidgets")
is.installed("httpuv")
is.installed("httr")
is.installed("jsonlite")
is.installed("knitr")
is.installed("labeling")
is.installed("later")
is.installed("lazyeval")
is.installed("magrittr")
is.installed("markdown")
is.installed("mime")
is.installed("munsell")
is.installed("openssl")
is.installed("pillar")
is.installed("pkgconfig")
is.installed("plogr")
is.installed("plotly")
is.installed("plyr")
is.installed("promises")
is.installed("purrr")
is.installed("R6")
is.installed("RColorBrewer")
is.installed("Rcpp")
is.installed("readr")
is.installed("reshape2")
is.installed("rlang")
is.installed("rmarkdown")
is.installed("scales")
is.installed("shiny")
is.installed("sourcetools")
is.installed("stringi")
is.installed("stringr")
is.installed("tibble")
is.installed("tidyr")
is.installed("tidyselect")
is.installed("tinytex")
is.installed("translations")
is.installed("utf8")
is.installed("viridisLite")
is.installed("withr")
is.installed("xfun")
is.installed("xtable")
is.installed("yaml")
library(XLConnect)
install.packages("rJava")
library(XLConnect)
headers <- c(
'X-API-TOKEN' = "GR_7VdPbx46ZyVF84l",
'Content-Type' = "application/json",
'Accept' = '*/*',
'accept-encoding' = 'gzip, deflate'
)
######SV survey ID#####
##original sv<-"SV_24wCXBoW63NxQvH"
###chile sv<-"SV_1OdPqNOoApsuIdf"
###moze sie przyda sv<-"SV_9Go06eJvcpwNgHz"
###domestic https://surveys.az1.qualtrics.com/jfe/form/SV_eQy2KEpjbfFRbBX
sv<-"SV_eQy2KEpjbfFRbBX"
url <- paste("https://imercer.az1.qualtrics.com/API/v3/surveys/",sv,sep = "")
req <- httr::GET(url, httr::add_headers(headers))
json <- httr::content(req, as = "text")
us <- fromJSON(json)
library(qualtRics)
library(jsonlite)
library(rvest)
library(car)
library(stringr)
headers <- c(
'X-API-TOKEN' = "GR_7VdPbx46ZyVF84l",
'Content-Type' = "application/json",
'Accept' = '*/*',
'accept-encoding' = 'gzip, deflate'
)
######SV survey ID#####
##original sv<-"SV_24wCXBoW63NxQvH"
###chile sv<-"SV_1OdPqNOoApsuIdf"
###moze sie przyda sv<-"SV_9Go06eJvcpwNgHz"
###domestic https://surveys.az1.qualtrics.com/jfe/form/SV_eQy2KEpjbfFRbBX
sv<-"SV_eQy2KEpjbfFRbBX"
url <- paste("https://imercer.az1.qualtrics.com/API/v3/surveys/",sv,sep = "")
req <- httr::GET(url, httr::add_headers(headers))
json <- httr::content(req, as = "text")
us <- fromJSON(json)
install.packages("shiny")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
faithful[, 2]
runApp('H:/rshiny/test')
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
months(as.Date(format(Sys.Date(), '%Y-%m-%01'))-210)
months(as.Date(format(Sys.Date(), '%Y-%m-%01'))-240)
#loading data
data <- read.csv("online_shoppers_intention.csv",header=TRUE)
# provide below path to working directory
setwd("C:/Users/filip-mordarski/Documents/filip/capstone/own project/Online-Shopper-s-intention-master")
#loading data
data <- read.csv("online_shoppers_intention.csv",header=TRUE)
class(data$Revenue)
# removing any rows with NA value
data <- data[complete.cases(data), ]
data %>%
summary(Revenue)
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(randomForest)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(lubridate)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(tinytex)) install.packages("data.table", repos = "http://cran.us.r-project.org")
data %>%
summary(Revenue)
data %>%
summarise(Revenue)
data %>%
summarize(Revenue)
summary(data$Revenue)
data$Revenue <- as.factor(data$Revenue)
y <- data$Revenue
# Create trainset and test set
set.seed(1)
test_index <- createDataPartition(y, times = 1, p = 0.1, list = FALSE)
test_set <- data[test_index, ]
train_set <- data[-test_index, ]
data %>%
group_by(Revenue)
summarise(FrequencyCount=n())
data %>%
group_by(Revenue)
summarise(FrequencyCount=n(Revenue))
data %>%
group_by(Revenue)
summarise(FrequencyPerc=mean(Revenue))
data %>%
summarise(FrequencyPerc=mean(Revenue))
##loading data
data <- read.csv("online_shoppers_intention.csv",header=TRUE)
# removing any rows with NA value
data <- data[complete.cases(data), ]
data %>%
summarise(FrequencyPerc=mean(Revenue))
y <- data$Revenue
# Create trainset and test set
set.seed(1)
test_index <- createDataPartition(y, times = 1, p = 0.1, list = FALSE)
test_set <- data[test_index, ]
train_set <- data[-test_index, ]
data %>%
summarise_each(Revenue,mean)
data %>%
summarise(FreqPercTrue=mean(Revenue),FreqPercFalse=1-mean(Revenue))
data %>%
summarise(FreqPercTrue=mean(Revenue),FreqPercFalse=1-mean(Revenue)) %>%
summarise(FreqPercTrue=n())
th frequency percentage if shopper will generate revenue
data %>%
summarize(FreqPercTrue=mean(Revenue),FreqPercFalse=1-mean(Revenue))
table_freq <- data %>%
summarize(FreqPercTrue=mean(Revenue),FreqPercFalse=1-mean(Revenue))
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(randomForest)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(lubridate)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(tinytex)) install.packages("data.table", repos = "http://cran.us.r-project.org")
table_freq <- data %>%
summarize(FreqPercTrue=mean(Revenue),FreqPercFalse=1-mean(Revenue))
View(table_freq)
melt(table_freq)
library(reshape2)
melt(table_freq)
melt(table_freq)
bp <- ggplot(melt(table_freq), aes(x="",y=value,fill=variable)) +
geom_bar(width = 1, stat = "identity")
bp <- ggplot(melt(table_freq), aes(x="",y=value,fill=variable)) +
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie
bp <- ggplot(melt(table_freq), aes(x="",y=value,fill=variable)) +
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/100)), size=5)
bp <- ggplot(melt(table_freq), aes(x="",y=value,fill=variable)) +
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
# create blank theme
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/100)), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent_rank(value/100)), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = paste(value/100, "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = paste(round(value,2), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/2 + c(0, cumsum(value)[-length(value)]),
label = paste(round(value,2), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value + c(0, cumsum(value)[-length(value)]),
label = paste(round(value,2), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/5 + c(0, cumsum(value)[-length(value)]),
label = paste(round(value*100,2), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/7 + c(0, cumsum(value)[-length(value)]),
label = paste(round(value*100,2), "%", sep = " ")), size=5)
cumsum(value)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/10 + c(0, cumsum(value)[-length(value)]),
label = paste(round(value*100,2), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/10 + c(0, cumsum(value)[-length(value)]),
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/20 + c(0, cumsum(value)[-length(value)]),
label = paste(round(value*100,0), "%", sep = " ")), size=5)
cumsum(pie$value)[-pie$length(value)]
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/20 + c(2, cumsum(value)[-length(value)]),
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/0.5 + c(0, cumsum(value)[-length(value)]),
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/2 + c(0, cumsum(value)[-length(value)]),
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = variable + c(0, cumsum(value)[-length(value)]),
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = variable ,
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value ,
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/5 ,
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/10000 ,
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/1000 ,
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/100 ,
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/50 ,
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/25 ,
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())+
geom_text(aes(y = value/15 ,
label = paste(round(value*100,0), "%", sep = " ")), size=5)
pie + scale_fill_brewer("Blues") + blank_theme +
theme(axis.text.x=element_blank())
pie + scale_fill_brewer("Blues", label = c(FreqPercTrue = "Yes", FreqPercFalse = "No")) +
blank_theme +
theme(axis.text.x=element_blank())
pie + scale_fill_brewer("Legend", label = c(FreqPercTrue = "Yes", FreqPercFalse = "No")) +
blank_theme +
theme(axis.text.x=element_blank())
bp <- ggplot(melt(table_freq), aes(x="",y=value,fill=variable)) +
geom_bar(width = 1, stat = "identity") +
ggtitle("Did the visitor generate revenue?")
pie <- bp + coord_polar("y", start=0)
# create blank theme
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
#create nice chart
pie + scale_fill_brewer("Legend", label = c(FreqPercTrue = "Yes", FreqPercFalse = "No")) +
blank_theme +
theme(axis.text.x=element_blank())
Below we can see pie chart which shows us the above data in a pleasant view.
\newline
\newline
```{r ,echo = FALSE,message=FALSE}
# pie chart
