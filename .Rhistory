if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
# Validation set will be 10% of MovieLens data
set.seed(1, sample.kind="Rounding")
# if using R 3.5 or earlier, use `set.seed(1)` instead
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
# lm(rating ~ as.factor(movieId) + as.factor(userId))
user_avgs <- validation %>%
left_join(movie_avgs, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu - b_i))
predicted_ratings <- validation %>%
left_join(movie_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
.$pred
model_2_rmse <- RMSE(predicted_ratings, validation$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(method="Movie + User Effects Model",
+                                      RMSE = model_2_rmse ))
## provide below path to working directory
setwd("C:/Users/filip-mordarski/Documents/filip/capstone/own project")
## provide below path to working directory
setwd("C:/Users/Uzytkownik/Documents/R courses edX/Harvard/capstone/own project")
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(randomForest)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(lubridate)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(tinytex)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(reshape2)) install.packages("data.table", repos = "http://cran.us.r-project.org")
data %>%
group_by(Month) %>%
group_by(Revenue)%>%
n()
data %>%
group_by(Month) %>%
group_by(Revenue)%>%
summarize(value=n())
data %>%
group_by(Month) %>%
select(Revenue,Month)%>%
summarize(value=n())
data %>%
group_by(Month) %>%
group_by(Revenue)%>%
mutate(value=n())
data %>%
group_by(Month) %>%
group_by(Revenue)%>%
mutate(value=n()) %>%
select(Month,value)
data %>%
group_by(Month,Revenue)
data %>%
group_by(Month,Revenue) %>%
summarize(value=n())
melt(group_month)
group_month <- data %>%
group_by(Month,Revenue) %>%
summarize(value=n())
melt(group_month)
group_month %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
group_month %>% ggplot(aes(Month,value))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
group_month %>% ggplot(aes(Month))  +
geom_bar(aes(fill = value), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
group_month %>% ggplot(aes(Month))  +
geom_bar()
View(group_month)
data %>% ggplot(aes(Month))  +
geom_bar()
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data %>% ggplot(aes(order(Month)))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data %>% ggplot(aes(x=order(Month)))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data %>% ggplot(aes(x=reorder(Month)))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
View(group_month)
X=c("Feb","Mar","May","June","Jul","Aug","Sep","Oct","Nov","Dec")
data %>% ggplot(aes(x=reorder(Month,X=X)))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data %>% ggplot(aes(x=sort(Month)))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
X= rev(X)
data %>% ggplot(aes(x=X[sort(order(X)[Month])]))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data %>% ggplot(aes(x=Month[order(match(Month,X))]))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data %>% ggplot(aes(x=Month[order(match(Month,X))]))
data %>% ggplot(aes(Month[order(match(Month,X))]))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
sorted=c("Feb","Mar","May","June","Jul","Aug","Sep","Oct","Nov","Dec")
sorted= rev(X)
data %>% ggplot(aes(Month[order(match(Month,sorted))]))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
Month[order(match(Month,sorted))]
data$Month[order(match(data$Month,sorted))]
data %>% ggplot(aes(factor(Month,levels(Month)[c(sorted)])))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
factor(Month,levels(Month)[c(sorted)]
2
factor(Month,levels(Month)[c(sorted)])
data$Month = factor(data$Month,levels(data$Month)[c(sorted)])
View(data)
data <- read.csv("online_shoppers_intention.csv",header=TRUE)
# Analysis
## Data cleaning
# removing any rows with NA value
data <- data[complete.cases(data), ]
data$Month = factor(data$Month,levels(data$Month)[factor(sorted)])
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
sorted= rev(X)
data$Month = factor(data$Month,levels(data$Month)[factor(sorted)])
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
sorted= rev(sorted)
data$Month = factor(data$Month,levels(data$Month)[factor(sorted)])
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data$Month
sorted=factor("Feb","Mar","May","June","Jul","Aug","Sep","Oct","Nov","Dec")
sorted=factor(c("Feb","Mar","May","June","Jul","Aug","Sep","Oct","Nov","Dec"))
sorted= rev(sorted)
data$Month = factor(data$Month,levels(data$Month)[c(9,4,5,7,6,1,10,3,2,8))
data$Month = factor(data$Month,levels(data$Month)[c(9,4,5,7,6,1,10,3,2,8)])
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data$Month = factor(data$Month,levels(data$Month)[c(8,2,3,10,1,6,7,5,4,9)])
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data <- read.csv("online_shoppers_intention.csv",header=TRUE)
# Analysis
## Data cleaning
# removing any rows with NA value
data <- data[complete.cases(data), ]
data$Month
data$Month = factor(data$Month,levels(data$Month)[c(2,8,9,10,1,4,5,7,6,3)])
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_brewer("Revenue")
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_brewer("Revenue") +
theme(axis.text.x=element_blank())
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_brewer("Revenue") +
theme(axis.text.x=element_blank()) +
blank_theme
View(table_freq)
View(group_month)
data %>%
group_by(Month) %>%
select(Month) %>%
mutate(True=sum(Revenue))
data %>%
group_by(Month) %>%
mutate(True=sum(Revenue))
data %>%
group_by(Month) %>%
summarise(True=sum(Revenue))
data %>%
group_by(Month) %>%
summarise(True=sum(Revenue[TRUE]))
data %>%
group_by(Month) %>%
summarise(True=sum(data[Revenue=TRUE]))
data %>%
group_by(Month) %>%
summarise(True=sum(data[Revenue==TRUE]))
data %>%
group_by(Month) %>%
summarise(True=sum(Revenue='TRUE'))
data %>%
group_by(Month) %>%
summarise(True=count(Revenue='TRUE'))
data %>%
group_by(Month) %>%
summarise(True=sum(Revenue=='TRUE'))
group_month <- data %>%
group_by(Month) %>%
summarise(True=sum(Revenue=='TRUE'),False=sum(Revenue=='FALSE'))
View(group_month)
group_month <- data %>%
group_by(Month) %>%
summarise(True=sum(Revenue=='TRUE'),False=sum(Revenue=='FALSE'),Total=n())
data %>% ggplot(aes(Month))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_brewer("Revenue") +
theme(axis.text.x=element_blank()) +
ggtitle("Revenue counts by month") +
blank_theme
kable(head(data), align = 'c', caption = "What percentage of visitors generate revenue?", digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(randomForest)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(lubridate)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(kableExtra)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(rmarkdown)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(tinytex)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(reshape2)) install.packages("data.table", repos = "http://cran.us.r-project.org")
head(data)
table_freq <- data %>%
summarize(FreqPercTrue=mean(Revenue),FreqPercFalse=1-mean(Revenue))
kable(table_freq, align = 'c', caption = "What percentage of visitors generate revenue?", digits = 2) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
View(data)
unique(data$VisitorType)
data %>% ggplot(aes(VisitorType))  +
geom_bar(aes(fill = Revenue), position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_brewer("Revenue") +
theme(axis.text.x=element_blank()) +
ggtitle("Revenue counts by Visitortype") +
blank_theme
group_visitor <- data %>%
group_by(Month) %>%
summarise(True=sum(Revenue=='TRUE'),False=sum(Revenue=='FALSE'),Total=n())
group_visitor <- data %>%
group_by(VisitorType) %>%
summarise(True=sum(Revenue=='TRUE'),False=sum(Revenue=='FALSE'),Total=n())
View(group_visitor)
group_visitor <- data %>%
group_by(VisitorType) %>%
summarise(True=sum(Revenue=='TRUE'),False=sum(Revenue=='FALSE'),FreqPercTrue=round(sum(Revenue=='TRUE')/n(),2),Total=n())
View(group_visitor)
View(group_visitor)
data %>%
group_by(special_day) %>%
summarise(FreqPerc=round(sum(Revenue=='TRUE')/n(),2))
data %>%
group_by(SpecialDay) %>%
summarise(FreqPerc=round(sum(Revenue=='TRUE')/n(),2))
special_day <- data %>%
group_by(SpecialDay) %>%
summarise(Counts=n(),FreqPerc=round(sum(Revenue=='TRUE')/n(),2))
View(special_day)
special_day <- data %>%
group_by(Date,SpecialDay) %>%
summarise(Counts=n(),FreqPerc=round(sum(Revenue=='TRUE')/n(),2))
special_day <- data %>%
group_by(Month,SpecialDay) %>%
summarise(Counts=n(),FreqPerc=round(sum(Revenue=='TRUE')/n(),2))
View(special_day)
special_day <- data %>%
group_by(SpecialDay) %>%
summarise(Counts=n(),FreqPerc=round(sum(Revenue=='TRUE')/n(),2))
special_day %>% ggplot(aes(SpecialDay,FreqPerc)) +
geom_line(colour = "lightblue")
special_day %>% ggplot(aes(SpecialDay,FreqPerc)) +
geom_line(colour = "lightblue") +
ggtitle("Frequency Percentage True Revenue vs Special Day indicator") +
blank_theme
special_day %>% ggplot(aes(SpecialDay,FreqPerc)) +
geom_line(colour = "lightblue") +
ggtitle("Frequency Percentage True Revenue vs Special Day indicator") +
theme_minimal()
special_day %>% ggplot(aes(SpecialDay,FreqPerc)) +
geom_line(colour = "lightblue",size=10) +
ggtitle("Frequency Percentage True Revenue vs Special Day indicator") +
theme_minimal()
special_day %>% ggplot(aes(SpecialDay,FreqPerc)) +
geom_line(colour = "lightblue",size=4) +
ggtitle("Frequency Percentage True Revenue vs Special Day indicator") +
theme_minimal()
special_day %>% ggplot(aes(SpecialDay,FreqPerc)) +
geom_line(colour = "lightblue",size=2) +
ggtitle("Frequency Percentage True Revenue vs Special Day indicator") +
theme_minimal()
